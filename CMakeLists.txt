cmake_minimum_required(VERSION 3.20)
set(CMAKE_CXX_STANDARD 17)
add_compile_definitions(_USE_MATH_DEFINES NOMINMAX )
if("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    set(CMAKE_POLICY_DEFAULT_CMP0069 NEW)
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()
project(nanojpeg)
string(TOUPPER ${CMAKE_BUILD_TYPE} CONFIG)

if(CMAKE_CXX_SIMULATE_ID STREQUAL "")
    set(COMPILER_INFO "${CMAKE_CXX_COMPILER_ID}")
else()
    set(COMPILER_INFO "${CMAKE_CXX_SIMULATE_ID}")
endif()
if(COMPILER_INFO MATCHES "Clang|GNU")
    add_compile_options(-mssse3 -march=sandybridge -O3 -ffast-math)
    if(COMPILER_INFO MATCHES "Clang")
        add_compile_options( -flto=thin)
    endif()
endif()
if(COMPILER_INFO MATCHES "MSVC")
    add_compile_options( -mssse3 -mavx)
    # if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    # else()
    # endif()
endif()
add_executable(nanojpeg Code/app.cpp Code/nanojpeg.hpp Code/profiling.hpp Code/converter.hpp)

find_package(Stb REQUIRED)
target_include_directories(nanojpeg PRIVATE ${Stb_INCLUDE_DIR})

find_package(libjpeg-turbo CONFIG REQUIRED)
target_link_libraries(nanojpeg PRIVATE libjpeg-turbo::turbojpeg-static)

find_package(mio CONFIG REQUIRED)
target_link_libraries(nanojpeg PRIVATE mio::mio)
# string(REPLACE "-mavx" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
# string(REPLACE "-msse4.1" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
# string(REPLACE "-march=native" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

message(STATUS "${CMAKE_CXX_COMPILER_ID} (${CMAKE_CXX_SIMULATE_ID})")
message(STATUS "c++ opt_${CONFIG}:  [${CMAKE_CXX_FLAGS}] [${CMAKE_CXX_FLAGS_${CONFIG}}]")
message(STATUS "link opt_${CONFIG}:  [${CMAKE_EXE_LINKER_FLAGS_RELEASE}]")

string(APPEND  CMAKE_EXE_LINKER_FLAGS_RELEASE "-v")

find_package(benchmark CONFIG REQUIRED)
add_executable(bench benchmark/app.cpp)
target_link_libraries(bench PRIVATE benchmark::benchmark benchmark::benchmark_main)